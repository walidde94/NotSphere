generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  name         String
  passwordHash String?
  provider     String
  providerId   String?
  avatarUrl    String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  sessions     Session[]
  groups       Group[]
  auditLogs    AuditLog[]
  subscriptions Subscription[]
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  userAgent    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Group {
  id        String   @id @default(cuid())
  userId    String
  name      String
  color     String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes     Note[]

  @@index([userId])
  @@index([position])
}

model Note {
  id           String       @id @default(cuid())
  groupId      String
  title        String
  content      Json
  plainPreview String
  isPinned     Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  deletedAt    DateTime?
  group        Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  attachments  Attachment[]

  @@index([groupId])
  @@index([updatedAt])
}

model Attachment {
  id        String   @id @default(cuid())
  noteId    String
  type      AttachmentType
  filename  String
  url       String
  storageKey String
  size      Int
  createdAt DateTime @default(now())
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
}

enum AttachmentType {
  image
  audio
  file
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entityType String
  entityId   String
  metadata   Json
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String
  plan             SubscriptionPlan
  status           String
  currentPeriodEnd DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SubscriptionPlan {
  free
  pro
  business
}
